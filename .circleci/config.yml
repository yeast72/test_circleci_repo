# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1

jobs:
  publish:
    docker:
      - image: circleci/circleci-cli

    steps:
      - checkout
      - run:
          echo "export STAGE=$(if [ $(git rev-parse --abbrev-ref HEAD) = 'master' ];
          then echo prod; elif [ $(git rev-parse --abbrev-ref HEAD) = 'staging' ];
          then
          echo staging; else echo dev; fi);
          " >> $BASH_ENV
      - run: for dir in $(git log --name-only --oneline -1 | sed 1d | grep '/' | cut -d "/" -f1 | sed '/^\.circleci$/d' | sort -u); do cd $dir; yarn; yarn test; cd ..; done

  build_app_1:
    docker:
      - image: circleci/node:10.16.2
    steps:
      - checkout
      - run:
          name: test app1
          command: |
            cd app1 
            yarn 
            yarn test
  build_app_2:
    docker:
      - image: circleci/node:10.16.2
    steps:
      - checkout
      - run:
          name: test app2
          command: |
            cd app2
            yarn
            yarn test

workflows:
  version: 2.1
  publish-orbs:
    jobs:
      - publish

  build_and_test:
    jobs:
      - build_app_1:
        filters:
          branches:
            only: master
      - build_app_2:
          filters:
            branches:
              only: master
      # # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "package.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-# Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "package.json" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-
      # - run: yarn install
      # - save_cache:
      #     paths:
      #       - node_modules
      #     key: v1-dependencies-{{ checksum "package.json" }}
      # # run tests!
      # - run: yarn test
